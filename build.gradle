plugins {
    id 'jacoco'
    id 'java-library'
    id 'maven'
    id 'maven-publish'
    id 'pmd'
    id 'signing'
    id 'com.diffplug.gradle.spotless' version '3.24.1' apply false
    id 'com.github.johnrengelman.shadow' version '5.1.0' apply false
    id 'com.github.spotbugs' version '2.0.0' apply false
    id 'org.gradle.playframework' version '0.8'
    id 'com.jfrog.bintray' version '1.8.4'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'com.diffplug.gradle.spotless'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'com.github.spotbugs'

    repositories {
        mavenLocal()
        jcenter()
    }

    spotless {
        java {
            trimTrailingWhitespace()
            indentWithSpaces(4)
            endWithNewline()
            importOrder 'java', 'javax', 'org', 'com', 'm.core'
            removeUnusedImports()
        }
    }

    spotbugs {
        ignoreFailures = true // Disabling for TravisCI
        toolVersion = '3.1.10'
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

}

sourceCompatibility = 8
targetCompatibility = 8

// Set a default dev snapshot version if mcore.version is not set
// in ~/.gradle/gradle.properties or ./gradle.properties or in command line as -Pmcore.version=1.2.3
version = project.hasProperty('mcore.version') ? project['mcore.version'] : '0.1.1-DEV-SNAPSHOT'

// Force code coverage, java doc, maven local publish after tests
check.dependsOn jacocoTestReport, javadoc, publishToMavenLocal

repositories {
    // Play Framework https://gradle.github.io/playframework/#applying_the_plugin
    maven {
        name "lightbend-maven-release"
        url "https://repo.lightbend.com/lightbend/maven-releases"
    }
    ivy {
        name "lightbend-ivy-release"
        url "https://repo.lightbend.com/lightbend/ivy-releases"
        layout "ivy"
    }
}

dependencies {
    // Using `api` instead of `implementation` to work around
    // pom generation scope issue : https://github.com/gradle/gradle/issues/1118
    api 'org.slf4j:slf4j-simple:1.7.25' // logging
    api 'org.apache.commons:commons-lang3:3.9' // number and string utils
    api 'org.glassfish.jersey.core:jersey-common:2.27' // uri template
    api 'org.aeonbits.owner:owner:1.0.10' // configuration file handling
    api 'org.aeonbits.owner:owner:1.0.10' // configuration file handling
    api 'com.google.guava:guava:27.0.1-jre' // multimap api for many to many
    api 'com.google.code.gson:gson:2.8.5' // json library
    api 'javax.servlet:javax.servlet-api:4.0.1' // for cookie and session

    api 'com.mashape.unirest:unirest-java:1.4.9' // rest client
    api 'org.apache.httpcomponents:httpclient:4.5.6' // rest http cookie
    api 'org.apache.httpcomponents:httpclient-cache:4.5.6' // rest client caching

    api 'commons-dbutils:commons-dbutils:1.7' // jdbc utils
    api 'mysql:mysql-connector-java:8.0.14' // jdbc drivers
    api 'org.postgresql:postgresql:42.2.5' // jdbc drivers
    api 'org.xerial:sqlite-jdbc:3.25.2' // jdbc drivers
    api 'org.apache.derby:derby:10.14.2.0' // jdbc drivers
    api 'org.hsqldb:hsqldb:2.4.1' // jdbc drivers
    api 'org.mapdb:mapdb:3.0.7' // embedded key value database
    api 'com.h2database:h2:1.4.197' // embedded JDBC database
    api 'redis.clients:jedis:3.0.1' // client for key value store
    api 'org.redisson:redisson:3.3.0' // client for key value store
    api 'org.mongodb:mongo-java-driver:3.9.1' // client for doc store

    api 'com.sparkjava:spark-core:2.8.0' // rest framework
    api ('org.springframework.boot:spring-boot-starter-webflux:2.1.2.RELEASE') { // rest framework
        // Use app logging https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html#howto-configure-log4j-for-logging
        exclude module: 'spring-boot-starter-logging'
    }
    api 'org.springframework.session:spring-session-core:2.1.2.RELEASE' // rest framework session
    api 'io.vertx:vertx-web:3.6.2' // rest framework
    // Using the default version from https://gradle.github.io/playframework/#play_framework
    api 'com.typesafe.play:play-server_2.12:2.6.15' // rest framework
    api 'com.typesafe.play:play-java_2.12:2.6.15' // rest framework
    api 'com.typesafe.play:play_2.12:2.6.15' // rest framework

    // Micronaut
    annotationProcessor platform("io.micronaut:micronaut-bom:1.2.0")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut.configuration:micronaut-openapi"
    api platform("io.micronaut:micronaut-bom:1.2.0")
    api "io.micronaut:micronaut-inject"
    api "io.swagger.core.v3:swagger-annotations"
    api "io.micronaut:micronaut-validation"
    api "io.micronaut:micronaut-runtime"
    api "io.micronaut:micronaut-http-server-netty"
    api "io.micronaut:micronaut-http-client"

    testImplementation 'junit:junit:4.12'
}

// Micronaut
shadowJar.dependsOn assemble // Micronaut annotation processing https://docs.micronaut.io/latest/guide/index.html#deployingApp
shadowJar { // Micronaut resources into shadow jar https://docs.micronaut.io/latest/guide/index.html#functionCLI
    mergeServiceFiles()
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

// Properties shared between pom, publish and bintray tasks
def bintrayUsername = project.hasProperty('bintray.user') ? project.property('bintray.user') : System.getenv('BINTRAY_USER')
def bintrayPassword = project.hasProperty('bintray.apiKey') ? project.property('bintray.apiKey') : System.getenv('BINTRAY_API_KEY')
def bintryaRepo = 'm.core'
def pomName = 'mcore'
def pomGroupId = 'com.hackorama.m.core'
def pomArtifactId = 'mcore'
def artifactDescription = 'm.CORE Microservices Framework'
def srcURL = 'https://github.com/hackorama/mcore'

// Maven publishing (Working around scope issue : https://github.com/gradle/gradle/issues/1118)
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = pomGroupId
            artifactId = pomArtifactId
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = pomName
                description = 'Microservices Framework'
                url = 'https://m.core.hackorama.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'hackorama'
                        name = 'Kishan Thomas'
                        email = 'kishan.thomas@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/hackorama/mcore.git'
                    developerConnection = 'scm:git:ssh://git@github.com:hackorama/mcore.git'
                    url =  srcURL
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            if(!project.version.contains('DEV')) { // Dev builds are not uploaded
                name = 'bintray'
                credentials {
                    username = bintrayUsername
                    password = bintrayPassword
                }
                // For auto publishing add ;publish=1 to URL, or publish manually at bintray.com
                releasesRepoUrl = "https://api.bintray.com/maven/$bintrayUsername/$bintryaRepo/$pomArtifactId/"
                // TODO snapshotsRepoUrl = https://www.jfrog.com/confluence/display/RTF/Deploying+Snapshots+to+oss.jfrog.org
            }
            url = version.contains('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

// TODO: Upload is broken for .asc signature files for bintray plugin
// So 'bintrayUpload' is used only for the first upload to create the package
// then 'publish' is used for updates with signatures
// https://github.com/bintray/gradle-bintray-plugin/issues/255
bintray {
    user = bintrayUsername
    key = bintrayPassword
    publications = ['mavenJava']
    publish = false // Manually publish at bintray.com
    filesSpec { // TODO: fix signature upload workaround
        from("${buildDir}/libs") {
            include '*.jar.asc'
        }
        from("${buildDir}/publications/mavenJava") {
            include 'pom-default.xml.asc'
            rename 'pom-default.xml.asc', "${project.name}-${project.version}.pom.asc"
        }
        into "${project.group.replaceAll(/\./, '/')}/${project.name}/${project.version}"
    }
    pkg {
        repo = bintryaRepo
        name = pomArtifactId
        desc = artifactDescription
        licenses = ['Apache-2.0']
        vcsUrl = srcURL
    }
}

// Set these in ~/.gradle/gradle.properties or as -P
//     signing.secretKeyRingFile : full path to .gnupg/secring.gpg
//     signing.keyId             : gpg --list-keys
//     signing.password          : key passphrase
signing {
    // Allow Travis builds that do not have the signing key
    // to use local maven publish for sub project tests
    if(!project.version.contains('DEV')) {
        sign publishing.publications.mavenJava
    }
}

task testSpring(type: Test) {
    environment 'SERVER_TYPE', 'SPRING' // Repeat all the tests with Spring server
    dependsOn cleanTest
}

task testVertx(type: Test) {
    environment 'SERVER_TYPE', 'VERTX' // Repeat all the tests with Vertx server
    dependsOn cleanTest
}

task testPlay(type: Test) {
    environment 'SERVER_TYPE', 'PLAY' // Repeat all the tests with Play server
    dependsOn cleanTest
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

test {
    environment 'SERVER_TYPE', 'SPARK' // Default tests using Spark server
    maxParallelForks = 1
    finalizedBy jacocoTestReport
    dependsOn cleanTest
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

pmd {
    incrementalAnalysis = true
    ignoreFailures = true
    ruleSetFiles = files(file("config/pmd/ruleset.xml"))
    ruleSets = []
}

javadoc {
    options.tags 'implSpec:a:Implementation Specification:', 'implNote:a:Implementation Note:'
}
