plugins {
    id 'application'
    id 'java-library'
    id 'eclipse'
    id 'jacoco'
    id "com.diffplug.gradle.spotless" version "3.16.0"
    id "com.github.spotbugs" version "1.6.8"
    id 'pmd'
    id "com.github.johnrengelman.shadow" version "4.0.3"
}

repositories {
    jcenter()
}

dependencies {
    implementation 'org.slf4j:slf4j-simple:1.7.25' // logging
    implementation 'org.apache.commons:commons-lang3:3.8.1' // number and string utils
    implementation 'org.glassfish.jersey.core:jersey-common:2.27' // uri template
    implementation 'org.aeonbits.owner:owner:1.0.10' // configuration file handling
    implementation 'com.google.guava:guava:27.0.1-jre' // multimap implementation for many to many
    implementation 'com.google.code.gson:gson:2.8.5' // json library 

    implementation 'com.mashape.unirest:unirest-java:1.4.9' // rest client
    implementation 'org.apache.httpcomponents:httpclient-cache:4.5.6' // rest client caching

    implementation 'commons-dbutils:commons-dbutils:1.7' // jdbc utils
    implementation 'mysql:mysql-connector-java:8.0.14' // jdbc drivers
    implementation 'org.postgresql:postgresql:42.2.5' // jdbc drivers
    implementation 'org.xerial:sqlite-jdbc:3.25.2' // jdbc drivers
    implementation 'org.apache.derby:derby:10.14.2.0' // jdbc drivers
    implementation 'org.hsqldb:hsqldb:2.4.1' // jdbc drivers
    implementation 'org.mapdb:mapdb:3.0.7' // embedded key value database
    implementation 'com.h2database:h2:1.4.197' // embedded JDBC database
    implementation 'redis.clients:jedis:3.0.1' // client for key value store
    implementation 'org.mongodb:mongo-java-driver:3.9.1' // client for doc store

    implementation 'com.sparkjava:spark-core:2.8.0' // rest framework
    implementation 'org.springframework.boot:spring-boot-starter-webflux:2.1.2.RELEASE' // rest framework
    implementation 'io.vertx:vertx-web:3.6.2' // rest framework

    testImplementation 'junit:junit:4.12'
}

configurations {
    all*.exclude module : 'spring-boot-starter-logging'
}

// code formatting

spotless {
    java {
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
        importOrder 'java', 'javax', 'org', 'com', 'com.hackorama'
        removeUnusedImports() 
    }
}

// code coverage 

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.enabled true 
        csv.enabled false
        html.enabled true
    }
}

test {
    environment 'SERVER_TYPE', 'SPARK' // Default tests using Spark server
    maxParallelForks = 1
    finalizedBy jacocoTestReport
    dependsOn cleanTest
}

task testSpring(type: Test) {
    environment 'SERVER_TYPE', 'SPRING' // Repeat all the tests with Spring server
    dependsOn cleanTest
}

task testVertx(type: Test) {
    environment 'SERVER_TYPE', 'VERTX' // Repeat all the tests with Vertx server
    dependsOn cleanTest
}

check.dependsOn jacocoTestReport

// code quality

spotbugs {
    toolVersion = '3.1.10'
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
    ignoreFailures = true
    ruleSetFiles = files(file("config/pmd/ruleset.xml"))
    ruleSets = []
}

application {
    mainClassName = "com.hackorama.mcore.Main"
}
